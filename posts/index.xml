<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Tdd的博客</title>
    <link>https://tddsamanomercy.github.io/posts/</link>
    <description>Recent content in Posts on Tdd的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Oct 2019 13:20:44 +0800</lastBuildDate>
    
	<atom:link href="https://tddsamanomercy.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java异常体系、日志</title>
      <link>https://tddsamanomercy.github.io/posts/java%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB%E6%97%A5%E5%BF%97/</link>
      <pubDate>Mon, 14 Oct 2019 13:20:44 +0800</pubDate>
      
      <guid>https://tddsamanomercy.github.io/posts/java%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB%E6%97%A5%E5%BF%97/</guid>
      <description>异常体系 什么是异常  An exception is an event that occurs during the execution of a program and disrupts the normal flow of the program&amp;rsquo;s instructions.
异常处理在java中的工作流程 当某个方法中发生了异常, 这个方法传递给运行时系统一个包含错误信息的异常对象，包括类型，程序的状态以及发生的位置.这个过程叫做抛出一个异常.
 当异常被抛出时，运行时系统会试图寻找能处理异常的东西. 某些可能处理异常的集合是一组有序的方法列表，从异常出现的位置按顺序被调用.这个方法的列表也被叫做调用栈. 下图展示了一个有三个方法调用的方法栈，第一个方法中有异常处理程序.
   运行时系统会在调用栈中寻找一个其中含有处理异常的代码块的方法，这个代码块称作异常处理程序. 这个寻找过程从异常发生的位置沿着调用栈与方法调用过程相反.当找到适当的方法就会把当前的异常传递给他. 如果抛出的异常对象的类型与处理程序可以处理的类型相匹配，则认为使用异常处理程序是合适的. 所选的异常处理程序用于捕获异常. 如果没有找到合适的处理程序，运行时系统也就是程序将会终止  异常处理程序关键字 如下图
throw &amp;amp; throws  Thethrows 用于指定方法在执行期间可能引发异常。它在调用方法时强制执行显式异常处理:
 public void simpleMethod() throws Exception { // ... }  Thethrow 允许我们抛出一个异常对象来中断程序的正常流程。这是当程序不能满足给定条件时最常用的方法:
 if (task.isTooComplicated()) { throw new TooComplicatedException(&amp;quot;The task is too complicated&amp;quot;); }   异常继承体系 我们怎么处理异常 使用 try-catch-finally 语句:</description>
    </item>
    
    <item>
      <title>Maven包管理总结</title>
      <link>https://tddsamanomercy.github.io/posts/maven%E5%8C%85%E7%AE%A1%E7%90%86%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 03 Oct 2019 06:49:31 +0800</pubDate>
      
      <guid>https://tddsamanomercy.github.io/posts/maven%E5%8C%85%E7%AE%A1%E7%90%86%E6%80%BB%E7%BB%93/</guid>
      <description> Maven是java开发者的福音，从手动敲命令到Mavne的自动化构建，java从繁琐走向简单，但这样的变化并不是百利而无一害，自动化构建带来的是自主选择的减少，而且Maven对于包冲突以及传递性依赖的解决机制并不能总是让人满意。今天就来简单总结一下其中的几个困难。 Java包管理 包和classpath java的包管理就是告诉JVM第三方类库所在位置和解决冲突的过程
 不用于java中用于解决类名冲突和访问控制的包，这里指由一堆相互关联的类经过编译所生成字节码.class集合的jar包 classpath用来为JVM指明所能执行字节码文件所在位置 传递性依赖，你依赖的类又依赖了别的类，全限定类名是类的唯一标识，当多个同名类出现在一个classpath中就会造成灾难-Classpath hell  Maven包管理 项目结构  约定优于配置
Maven的包 按照约定为所有的包编号，⽅便检索 groupId/artifactId/version，语义化版本
 默认的Maven中央仓库中存放着世界上所有的几乎所有的包，并按照约定的目录存放
 Maven在引入一个包后会根据这个包的pom.xml文件中的依赖引入所需要的所有包，直到没有可引入的包为止，这就是Maven的传递性依赖
 项目中所需的包会自动下载到本地.m2仓库中
包冲突的解决 常见的包冲突会引发的异常 AbstractMethodError NoClassDefFoundError ClassNotFoundException LinkageError   传递性依赖的⾃动管理  原则：绝对不允许最终的classpath出现同名不同版本的jar包 依赖冲突的解决：原则：最近的胜出  依赖的scope 指定依赖所有效的域，隔离第三方依赖
 compile: test和生产代码中都可以使用 test：只能在测试代码中使用 provided: 只在编译时有效  手动解决包冲突的过程(以&amp;hellip;/hcsp/resolve-package-conflict为例)  首先查看项目的依赖结构，有三种方法：  找到项目的maven模块，点击Dependencies  命令行mvn dependency:tree(解决冲突后的树结构)  使用插件Maven Helper   分析出现冲突所在的包，并去中央仓库查看对应类的源代码 根据编译器提示抛出异常位置及插件所示冲突可知org.springframework.spring-web出现了冲突，进入中央仓库找到项目源代码所在位置 定位到所处问题的类中 经过对比发现5.1.8版本中没有getJsonpFunction()方法  手动解决冲突
 利用标签删除传递性依赖 将所需要的包声名在项目pom.xml中，根据maven包管理规则使之成为被依赖的包  Maven——⾃动化构建⼯具   祥见Maven实战   </description>
    </item>
    
    <item>
      <title>Hugo搭建博客简单教程</title>
      <link>https://tddsamanomercy.github.io/posts/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%AE%80%E5%8D%95%E6%95%99%E7%A8%8B/</link>
      <pubDate>Wed, 02 Oct 2019 12:54:09 +0800</pubDate>
      
      <guid>https://tddsamanomercy.github.io/posts/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%AE%80%E5%8D%95%E6%95%99%E7%A8%8B/</guid>
      <description>分享使用hugo搭建个人博客的简单教程（个人总结） 以下代码如无特殊说明均在项目根目录进行操作，git add,git commit等git相关代码为简写需要根据实际情况补充完整 下载并安装hugo  从官网下载 配置环境变量
Create a new site hugo new site siteaddress(siteaddress这里填写github用户名.github.io-generator,用户名小写)
 eg: hugo new site zhangsan.github.io-generator
Add a theme 在当前目录下
git init git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke echo &#39;theme = &amp;quot;ananke&amp;quot;&#39; &amp;gt;&amp;gt; config.toml   到这里下载更多主题
Add Some Content  hugo new posts/my-first-post.md  在posts目录中找到相应文件进行编辑 完成后draft状态改为false，修改标题时间
Start the Hugo server  hugo server -D  Navigate to your new site at 你的博客预览.
Customize the Theme  在config.</description>
    </item>
    
    <item>
      <title>开博大吉！</title>
      <link>https://tddsamanomercy.github.io/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</link>
      <pubDate>Wed, 02 Oct 2019 12:14:38 +0800</pubDate>
      
      <guid>https://tddsamanomercy.github.io/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</guid>
      <description>大家好 我的博客开通了！</description>
    </item>
    
  </channel>
</rss>